@import "../sass/main.scss";

$btnAddEventDiameter: 50px;
$navHeight: 10vh;
$modalEventsBtn: (
  Poo: $poo,
  Pee: $pee,
  Activity: $activity,
  Drink: $drink
);

.navBar {
  //Style the Menu of the Navbar
  .bottomNavBar {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: 1fr 1fr;
    grid-template-areas: "history events info" "history events info";

    font-size: 35 / 100 * $navHeight;
    bottom: 0;
    height: $navHeight;
    width: 100vw;
    background-color: $primary-color;
    a {
      color: $almost-white;
      text-decoration: none;
    }
    z-index: 2;
    .activeLink {
      color: $primary-dark;
    }

    .history {
      grid-area: history;
      align-self: center;
      justify-self: start;
      width: 100%;

      .calendar {
        padding-top: 1vh;
        font-size: 0.8rem;
        font-weight: bold;
      }
    }
    .about {
      grid-area: info;
      justify-self: end;
      align-self: center;
      width: 100%;
      .infos {
        padding-top: 1vh;
        font-size: 0.8rem;
        font-weight: bold;
      }
    }
    .events {
      grid-area: events;
      justify-self: center;
      align-self: center;
      text-decoration: none;
      color: $almost-white;
      cursor: pointer;
      width: 100%;
      .new {
        padding-top: 1vh;
        font-size: 0.8rem;
        font-weight: bold;
      }
    }
  }

  //Style and Show (or not) the event menu
  .modal {
    display: grid;
    grid-template-columns: auto repeat(3, minmax(100px, 20vw)) auto;
    grid-template-rows: 1fr repeat(3, minmax(100px, 20vh)) 10vh;
    grid-template-areas: ". . . . ." ". . Pee . ." ". Activity . Drink ." ". . Poo . ." ". . . . .";

    position: absolute;
    top: 0;
    min-height: 100 - $navHeight;
    max-height: 100 - $navHeight;
    width: 100vw;
    overflow: hidden;
    background-color: transparentize($color: rgb(255, 255, 255), $amount: 0.02);
    will-change: transform, opacity;
    a {
      text-decoration: none;
    }
    .btn {
      display: flex;
      flex-direction: column;

      justify-items: center;
      align-items: center;
      margin: auto;
      h3 {
        grid-row: 2;

        font-family: "Assistant", sans-serif;
        color: $text-color-dark;
        font-weight: bold;
        font-size: 3vmax;
        padding: 10px 0;
      }
      .circle {
        grid-row: 1;
        display: flex;
        @include box(50px);
        border-radius: 50%;
        .icon {
          width: 50%;
          margin: auto;
        }
      }
    }

    // It's like a map... we don't have to write the same code for our 4 buttons
    @each $event, $bgColor in $modalEventsBtn {
      .btn-#{$event} {
        @extend %btn;
        grid-area: $event;
        .circle {
          border: 2px solid $orange;
          background: radial-gradient(
            circle at 6vmin 6vmin,
            white,
            rgb(230, 230, 230)
          );
        }
      }
    }
  }
  .modalHidden {
    .modal {
      opacity: 0;
      transition: opacity 0.5s ease 0.5s;
      pointer-events: none;

      %btn {
        animation: scale-out-center 0.5s cubic-bezier(0.55, 0.085, 0.68, 0.53)
          both;
      }
    }
  }
  .modalVisible {
    .modal {
      opacity: 1;
      pointer-events: auto;
      %btn {
        animation: scale-in-center 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94)
          both;
      }
    }
  }
}
// animation scale-in-center
@include keyframes(scale-in-center) {
  0% {
    transform: scale(0);
    opacity: 0;
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}
// animation scale-out-center
@include keyframes(scale-out-center) {
  0% {
    transform: scale(1);
    opacity: 1;
  }
  100% {
    transform: scale(0);
    opacity: 0;
  }
}
